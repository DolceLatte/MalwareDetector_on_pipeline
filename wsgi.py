# wsgi.py
import torch
from smart_getenv import getenv
import torch.nn as nn
import torch.nn.functional as F
from app.classifier import Classifier
from app import create_app

use_cuda = torch.cuda.is_available()

class CNNClassifier_custom(nn.Module):
    def __init__(self):
        # 항상 torch.nn.Module을 상속받고 시작
        super(CNNClassifier_custom, self).__init__()
        conv1 = nn.Conv1d(17, 50, 3)
        # activation ReLU
        pool1 = nn.MaxPool1d(2)
        conv2 = nn.Conv1d(50, 70, 3)
        # activation ReLU
        pool2 = nn.MaxPool1d(2)
        conv3 = nn.Conv1d(70, 70, 3)
        # activation ReLU
        pool3 = nn.MaxPool1d(2)
        ReLU = nn.ReLU()
        self.conv_module = nn.Sequential(
            conv1,
            nn.BatchNorm1d(50, affine=True),
            nn.ReLU(),
            pool1,
            conv2,
            nn.BatchNorm1d(70, affine=True),
            nn.ReLU(),
            pool2,
            conv3,
            nn.BatchNorm1d(70, affine=True),
            nn.ReLU(),
            pool3,
        )

        fc1 = nn.Linear(31360, 1000)
        fc2 = nn.Linear(1000, 300)
        fc3 = nn.Linear(300, 9)
        fc4 = nn.Linear(9, 2)

        self.fc_module = nn.Sequential(
            fc1,
            nn.BatchNorm1d(1000),
            nn.ReLU(),
            fc2,
            nn.BatchNorm1d(300),
            nn.ReLU(),
            fc3,
            nn.BatchNorm1d(9),
            nn.ReLU(),
            fc4
        )

        # gpu로 할당
        if use_cuda:
            self.conv_module = self.conv_module.cuda()
            self.fc_module = self.fc_module.cuda()

    def forward(self, x):
        out = self.conv_module(x)
        # make linear
        dim = 1
        for d in out.size()[1:]:
            dim = dim * d
        out = out.view(-1, dim)
        out = self.fc_module(out)
        return F.softmax(out, dim=1)

file = getenv("FILE",default="./model/detector_sectionInfo_allData.pth")
params = torch.load(file,map_location=torch.device('cpu'))
classifier = Classifier(params)

app = create_app(classifier)
app.run(host='0.0.0.0', port=8000, debug=True)